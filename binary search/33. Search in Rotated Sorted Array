(Medium)
语言：python

题目：
  整数数组 nums 按升序排列，数组中的值互不相同 。
  在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了旋转，
  使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。
  给你 旋转后的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。


示例 1：
  输入：nums = [4,5,6,7,0,1,2], target = 0
  输出：4
  
  
对于一个值互不相同的数组，即使经过了旋转，仍然有一部分是升序排列的。那么还可以使用二分查找来进行
如果nums[low]<=nums[mid],那么左边界就是有序的，否则右边界有序。在比较target的位置在左边还是右边即可

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l,r = 0,len(nums)-1
        while l<=r:
            mid = l+(r-l)//2
            if nums[mid] == target:
                return mid
            elif nums[0]<=nums[mid] :     #在左边界
                if nums[0]<=target<nums[mid]:
                    r = mid-1
                else:l = mid+1
            else:
                if nums[len(nums)-1]>=target>nums[mid]:
                    l = mid+1
                else:
                    r = mid-1
        return -1

