(Medium)
语言：python

题目：
  给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
  如果数组中不存在目标值 target，返回 [-1, -1]。
进阶：
  你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？

示例 1：
  输入：nums = [5,7,7,8,8,10], target = 8
  输出：[3,4]
 
这道题如果用遍历的方法，时间复杂度为O(N)且方法比较简单
这里只介绍用二分查找的方法，保证时间复杂度为O(logN)

首先介绍二分法的两个模板：
def bsearch1(l,r):              #从右边趋近找到开始位置
  while l<=r:
    mid = (l+r)//2
    if num[mid]>=target:
      r = mid
    else: l = mid+1 
return 1

def bsearch2(l,r):              #从左边趋近找到结束位置
  while l<=r:
    mid = (l+r+1)//2
    if num[mid]<=target:
      l = mid
    else: r = mid-1
  return 1
这两个模板都可以作为二分查找的程序，但是趋近的方向不同，如果数组中只有一个符合，那么肯定都可以找到，但是如果有多个符合，
这两个模板就会分别找到最前面和最后面的
  
在本题中，我们需要找到开始和结束位置。所以就需要二分查找一个左边界和右边界。刚好可以使用这两个模板完成

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if len(nums)==0 or nums[0]>target or nums[-1]<target:
            return [-1,-1]
        l,r = 0,len(nums)-1
        while l<r:                  #左边界
            mid = (l+r)//2
            if nums[mid]>=target:
                r = mid
            else:
                l = mid+1
        if nums[r] != target:return [-1,-1]
        L = r
        l,r = 0,len(nums)-1
        while l<r:
            mid = (l+r+1)//2
            if nums[mid]<=target:
                l = mid
            else:
                r = mid-1
        return [L,l]
        

        
