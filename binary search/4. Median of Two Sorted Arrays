(Hard)
语言：Python

题目：
  给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。
  算法的时间复杂度应该为 O(log (m+n)) 。

示例 1：
  输入：nums1 = [1,3], nums2 = [2]
  输出：2.00000
  解释：合并数组 = [1,2,3] ，中位数 2


这道题比较复杂，主要是对要求时间复杂度为O(log(m+n)),这就导致了要对两个数组进行二分查找。但是要搞清楚边界条件和判定二分的mid还是比较困难的

这里借用一下LeetCode官方的二分思路仅供参考

思路：
假设两个有序数组分别是A和B。要找到第k个元素，我们可以比较A[k/2−1]和B[k/2−1]，其中 // 表示整数除法。由于A[k/2−1]和B[k/2−1]的前面共有k-2个元素。
对于 A[k/2−1] 和B[k/2−1]中的较小值，最多只会有k−2个元素比它小，那么它就不能是第k小的数了。
因此我们可以归纳出三种情况：
如果A[k/2−1]<B[k/2−1]，A[0]到A[k/2−1] 也都不可能是第k个数，可以全部排除。

如果A[k/2−1]>B[k/2−1]，则可以排除B[0]到B[k/2−1]。

如果A[k/2−1]=B[k/2−1]，则可以归入第一种情况处理。

