(Medium)
语言：Python

题目：
  给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。
  请你找出并返回只出现一次的那个数。
  你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。

示例 1:
  输入: nums = [1,1,2,3,3,4,4,8,8]
  输出: 2


题目要求了使用时间复杂度为O(log n)，所以使用二分查找的方法
这道二分查找的判别条件有点脑筋急转弯的意思，首先研究一下这个数组：[1,1,2,2,3,7,7]
假设单个数字的下标为i,这就把整个数组分成了两部分，左右两部分都是偶数个元素。所以这个单独元素得到小标只会是偶数，只需要判断
num[mid] == num[mid+1]即可。如果两者相等，那说明i一定在后面的区间，调整左边界。否则调整右边界。


class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l,r = 0,len(nums)-1
        while l<r:
            mid = (l+r)//2
            mid -= (mid&1)                  #当mid是奇数时，用(mid&1)=1将其变为偶数
            if nums[mid] == nums[mid+1]:
                l = mid + 2                 #直接排除两个
            else:
                r = mid
        return nums[l] 
        
  
