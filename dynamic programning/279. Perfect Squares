#### Medium  
#### python    

### 题目：
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。     
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。     

### 示例：
输入：n = 12   
输出：3      
解释：12 = 4 + 4 + 4     

这道题是一道典型的动态规划分割类型题目。因为dp的状态并不需要一直相邻。对于分割类问题，动态规划的状态转移方程并不依赖于相邻状态。
dp[i]可以取得最小取值为min(dp[i-1],dp[i-4],dp[i-9]...)+1


### 解法：
class Solution:
    def numSquares(self, n: int) -> int:
        dp = [inf]*(n+1)    #dp[0]状态是不需要的。只是为了把下标对齐
        dp[0] = 0
        nums = [i*i for i in range(1,int(n**0.5)+1)]   #需要的完全平方数
        for num in nums:    #先遍历num可以有效的让接下来j只在大于num的范围遍历，小于num的就没必要遍历了，因为不可能有解
            for j in range(num,n+1):
                dp[j] = min(dp[j],dp[j-num]+1)    
        return dp[-1]
