(medium)
语言：Python
题目：在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，
因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，
若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。
弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。

给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。

这个题目与435的区间重置比较相似，有兴趣可以看一下。首先想到的肯定是做排序，把这个气球的位置按照开始或结束坐标排序，然后进行遍历找重叠的
坐标区间。但是这里要注意区间找到怎么进行判定，可能多个气球只需要一支箭。


解法一：
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
       if len(points) == 0: return 0
       points.sort(key=lambda x:x[0])      #匿名函数lambda对左侧值进行排序
       result = 1                          #因为无论如何都要射出一支箭，所以初始数量是1
       for i in range(1,len(points)):
           if points[i][0] > points[i-1][1]:      #后面气球的开始坐标与前面气球的结束坐标比较
               result +=1
           else:
               points[i][1] = min(points[i-1][1],points[i][1])     #如果区间重叠了，在比较就要换成最小的那个初始坐标

       return result
该解法是对开始坐标进行排序，所以在接下来判定的时候有重叠区域就要替换前两个气球结束坐标最小的

解法二：

class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        if not points:
            return 0
        
        points.sort(key=lambda balloon: balloon[1])   #对结束坐标排序
        pos = points[0][1]
        ans = 1
        for balloon in points:
            if balloon[0] > pos:      #后面气球开始坐标大于前面气球结束坐标
                pos = balloon[1]
                ans += 1
        
        return ans
    该解法是根据气球的结束坐标进行排序的，同时规定了一个pos位置，用每个气球的开始位置与pos比较。如果发生区间重叠，就不计数直接看下一个气球的开始坐标。
如果没发生重叠就要进行计数并且改变pos的位置
