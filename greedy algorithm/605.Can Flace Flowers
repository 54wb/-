(Easy)
语言：Python
题目：假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。  
给你一个整数数组  flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。  
另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false

这个问题最常见的解法就是去遍历然后分情况讨论，主要是数组的边界情况与中间情况不一致
但是我在看题解时发现两种比较好的解答：

class Solution:
    def canPlaceFlowers(self,flowered:List[int],n:int)->bool:
        num = 0
        count = 1
        for i in range(0,len(flowered)):    ##遍历每个位置为了获取count的个数
            if flowered[i] == 0:
                count+=1
            else:
                count=0         
            if count ==3: #连续三个都是没有花可以中中间
                num+=1                                #只有三个连续都是没有花的才会num+
                count = 1
        if count ==2:
            num+=1                                    #最后的边界情况
        return num>=n

这种方法不需要考虑左边界，因为count初始值是1，当走到右边界时要考虑最后的count是2就证明最后三个位置是100，右边界可以放


class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        count = 0
        flowerbed = [0]+flowerbed+[0]                 #给左右边界先各加一个0
        for i in range(1,len(flowerbed)-1):
            if flowerbed[i]==0 and flowerbed[i-1]==0 and flowerbed[i+1]==0:
                count+=1
                flowerbed[i]=1
            if count>=n:
                return True
        return False

这种方法是利用list的特性直接左右各加一个0，就不需要考虑原来的左右边界，直接判断连着的三个即可
        
        
