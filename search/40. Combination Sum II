(Medium)
python

题目：
  给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
  candidates 中的每个数字在每个组合中只能使用 一次 。  
  注意：解集不能包含重复的组合。 

示例 1:
  输入: candidates = [10,1,2,7,6,1,5], target = 8,
  输出:
  [
  [1,1,6],
  [1,2,5],
  [1,7],
  [2,6]
  ]

遇到重复数字的搜索，按顺序搜索，设置合理的变量，在搜索的过程中判断是否会出现重复集结果。
不重复就需要按 顺序 搜索， 在搜索的过程中检测分支是否会出现重复结果 。注意：这里的顺序不仅仅指数组 candidates 有序，还指按照一定顺序搜索结果。


解法：
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res,n = [],len(candidates)
        candidates.sort()
        if candidates[0]>target:
            return res
        def dfs(target,begin,path):
            if target == 0:         #sum(path)=target
                res.append(path[:])
                return 
            for i in range(begin,n):
                if candidates[i] > target:      #如果没有已有的path已经大于target，那么后面的全部剪枝
                    break
                if i > begin and candidates[i-1] == candidates[i]:    #避免同一层重复
                    continue
                path.append(candidates[i])
                dfs(target-candidates[i],i+1,path)
                path.pop()
        dfs(target,0,[])
        return res

if i > begin and candidates[i-1] == candidates[i]
这个避免重复当思想太重要了。
这个方法最重要的作用是，可以让同一层级，不出现相同的元素。即
                  1
                 / \
                2   2  这种情况不会发生 但是却允许了不同层级之间的重复即：
               /     \
              5       5
                例2
                  1
                 /
                2      这种情况确是允许的
               /
              2  
                
为何会有这种神奇的效果呢？
首先 i-1 == i 是用于判定当前元素是否和之前元素相同的语句。这个语句就能砍掉例1。
可是问题来了，如果把所有当前与之前一个元素相同的都砍掉，那么例二的情况也会消失。 
因为当第二个2出现的时候，他就和前一个2相同了。
                
那么如何保留例2呢？
那么就用i > begin 来避免这种情况，你发现例1中的两个2是处在同一个层级上的，
例2的两个2是处在不同层级上的。
在一个for循环中，所有被遍历到的数都是属于一个层级的。我们要让一个层级中，
必须出现且只出现一个2，那么就放过第一个出现重复的2，但不放过后面出现的2。
第一个出现的2的特点就是 cur == begin. 第二个出现的2 特点是cur > begin.


