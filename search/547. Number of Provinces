(Medium)
语言：python

题目：
  有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。
  省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。
  给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。
  返回矩阵中 省份 的数量。

示例 1：
输入：isConnected = [[1,1,0],
                    [1,1,0],
                    [0,0,1]]
输出：2

可以把 n 个城市和它们之间的相连关系看成图，城市是图中的节点，相连关系是图中的边，给定的矩阵 isConnected 即为图的邻接矩阵，省份即为图中的连通分量。
这样就可以使用图搜索算法对整个图进行搜索，用一个visit 记录已经访问过的顶点，如果有没有访问过的，就递归使用dfs进行搜索并记录，只要完成一个连通域访问后省份数加一

解法：
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i: int):                      #访问完一个连通域
            for j in range(provinces):
                if isConnected[i][j] == 1 and j not in visited:
                    visited.add(j)
                    dfs(j)
        
        provinces = len(isConnected)
        visited = set()          #集合可以防止一直访问相同的顶点
        circles = 0

        for i in range(provinces):
            if i not in visited:
                dfs(i)
                circles += 1
        
        return circles

