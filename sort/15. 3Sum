(Medium)
语言：Python

题目：
  给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
  注意：答案中不可以包含重复的三元组。

 示例 1：
  输入：nums = [-1,0,1,2,-1,-4]
  输出：[[-1,-1,2],[-1,0,1]]

这道题的重点是如何保证没有重复的结果。
首先进行特别情况的判定，然后对数组进行排序，排序后的数组遍历查找更加方便
若 nums[i]>0：因为已经排序好，所以后面不可能有三个数加和等于 0，直接返回结果。
对于重复元素：跳过，避免出现重复解
令左指针 L=i+1，右指针 R=n−1，当 L<R 时，执行循环：
当 nums[i]+nums[L]+nums[R]==0，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 L,R 移到下一位置，寻找新的解
若和大于 0，说明 nums[R] 太大，R 左移
若和小于 0，说明 nums[L] 太小，L 右移


解法：
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []
        nums.sort()
        if not nums or n<3:
            return res
        for i in range(n):
            if nums[i]>0:
                return res
            if i>0 and nums[i] == nums[i-1]:
                continue
            l = i+1
            r = n-1
            while l<r:
                if nums[i]+nums[l]+nums[r] == 0:
                    res.append([nums[i],nums[l],nums[r]])
                    while l<r and nums[l] == nums[l+1]:
                        l = l+1
                    while l<r and nums[r] == nums[r-1]:
                        r = r-1
                    r = r-1 
                    l = l+1
                elif nums[i]+nums[l]+nums[r] > 0:
                    r-=1
                else:
                    l+=1
        return res 
