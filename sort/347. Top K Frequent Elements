(Medium)
语言：Python


题目：
  给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。

示例 1:
  输入: nums = [1,1,1,2,2,3], k = 2
  输出: [1,2]

对于topK大这类问题，一般可以使用堆这种数据类型来实现。特别的，我们使用小顶堆来实现。
同时，对于topK小的问题，可以使用大顶堆更容易实现

因为Python内置了标准库模块heapq来实现大小堆。这里我们只需要用heapq.heappush和heapq.heappop来完成

解法：
import heapq
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        #要统计元素出现频率
        map_ = {} #nums[i]:对应出现的次数
        for i in range(len(nums)):
            map_[nums[i]] = map_.get(nums[i], 0) + 1
        
        #对频率排序
        #topK大用小根堆
        #定义一个小顶堆，大小为k
        pri_que = [] #小顶堆
        
        #用固定大小为k的小顶堆，扫面所有频率的数值
        for key, freq in map_.items():
            heapq.heappush(pri_que, (freq, key))
            if len(pri_que) > k: #如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k
                heapq.heappop(pri_que)
        
        #找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒叙来输出到数组
        result = [0] * k
        for i in range(k-1, -1, -1):
            result[i] = heapq.heappop(pri_que)[1]
        return result
        
        
        
这里引用知乎一个博主关于Python大小堆的总结链接供大家学习
https://zhuanlan.zhihu.com/p/430397441


用Python实现的堆排序代码：
def heapify(arr, n, i):
    largest = i         #目前的父节点
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2

    if l < n and arr[i] < arr[l]:
        largest = l

    if r < n and arr[largest] < arr[r]:
        largest = r

    if largest != i:            #说明子节点有比父节点大的
        arr[i], arr[largest] = arr[largest], arr[i]  # 交换

        heapify(arr, n, largest)  #还需要考虑原来的子节点位置变成父节点的值后是否还满足大顶堆


def heapSort(arr):
    n = len(arr)

    # Build a maxheap. 
    for i in range(n//2-1, -1, -1):      #只需要从非叶子节点开始遍历即可，后面的都没有子节点
        heapify(arr, n, i)

        # 一个个交换元素
    for i in range(n - 1, 0, -1):        #将最大的父节点与最后元素交换
        arr[i], arr[0] = arr[0], arr[i]  # 交换
        heapify(arr, i, 0)               #继续构造最后元素的大顶堆


arr = [4,6,7,5,9,8,3,2]
heapSort(arr)
print(arr)

可配合链接https://zhuanlan.zhihu.com/p/105624690的树形图解食用

