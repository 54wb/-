(Medium)
语言：Python

题目：
  给定一个字符串，请将字符串里的字符按照出现的频率降序排列。
  
示例：
  输入:"tree"

  输出:"eert"
  
这道题可以直接调用Python内置的函数sorted进行排序，然后正常输出即可。但是这样时间复杂度是O(N+klogk),因为内部使用了快排

解法一：
class Solution:
    def frequencySort(self, s: str) -> str:
        map = {}             #map哈希表次数
        res = ""
        for i in range(len(s)):
            map[s[i]] = map.get(s[i],0)+1
        dict = sorted(map.items(), key=lambda x: -x[1])          #对字典排序注意要用dict的items
        for i in dict:
            res += (i[0] * i[1])
        return res
        
这里重点介绍一下另外的一种排序方式->桶排序
桶排序的思路如下：
  遍历字符串，统计每个字符出现的频率，同时记录最高频率maxFreq；
  创建桶，存储从 1 到 maxFreq 的每个出现频率的字符；
  按照出现频率从大到小的顺序遍历桶，对于每个出现频率，获得对应的字符，然后将每个字符按照出现频率拼接到排序后的字符串。

