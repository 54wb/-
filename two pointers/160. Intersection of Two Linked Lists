(Easy)
语言：Python     

题目：
  给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。       

示例 1：


<img src="https://github.com/54wb/LeetCode-exercise/blob/main/two%20pointers/160_statement.png" width="500" height="200">
  
  
  输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3            
  输出：Intersected at '8'       
  解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。        
  在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
  
这是双指针中遇到的第二个链表的题（另一个是142），从这两个题可以看出对于链表问题的双指针，往往可能需要找到某种规律让两个双指针相遇。此时就是
满足条件的结果。这与我们之前做的数组双指针可能处理方法是不同的。需要引起注意！

解法：           
class Solution:                 
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:          
        i,j = headA,headB               #两个指针分别指向A,B         
        while i!=j:           
            i = i.next if i else headB  #i指针跑完了就指向B开始跑         
            j = j.next if j else headA  #j指针跑完了就指向A开始跑
        return j            

解题思路：假设A链表从头结点到相交节点之间有a个节点；B链表从头结点到相交节点之间有b个节点;相交节点到尾节点之间有c个节点；

那么i指针第二次到相交节点的路程就是 a+c+b
j指针第二次到相交节点的路程就是 b+c+a
两者相等，所以他们一定相遇。如果没有相交节点，那最后就都返回null
