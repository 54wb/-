(Medium)
语言：Python/c++
题目：
  给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列  ，请你从数组中找出满足相加之和等于目标数 target 的两个数。
  如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1 <= index1 < index2 <= numbers.length 。
  以长度为 2 的整数数组 [index1, index2] 的形式返回这两个整数的下标 index1 和 index2。
  你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。
  你所设计的解决方案必须只使用常量级的额外空间。

示例 1：
  输入：numbers = [2,7,11,15], target = 9
  输出：[1,2]
  解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。

解法：
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l,r = 0,len(numbers)-1                       #左右两个指针
        while l<r:
            total = numbers[l]+numbers[r]
            if total == target: return [l+1,r+1]     #大于target右指针左移
            elif total>target:
                r-=1
            elif total<target:                       #小于target左指针右移
                l+=1
        return null
        
vector<int> twoSum(vector<int>& numbers, int target) {
    int l = 0, r = numbers.size() - 1, sum;
    while (l < r) {
      sum = numbers[l] + numbers[r];
      if (sum == target) break;
      if (sum < target) ++l;
      else --r;
    }
    return vector<int>{l + 1, r + 1};
}

初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，并和目标值比较。
如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，则将左侧指针右移一位。
如果两个元素之和大于目标值，则将右侧指针左移一位。移动指针之后，重复上述操作，直到找到答案

