(Easy)
语言：python
题目：
  给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
  请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
  注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，
  其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

示例 1：
  输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
  输出：[1,2,2,3,5,6]
  解释：需要合并 [1,2,3] 和 [2,5,6] 。
  合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。

示例 2：
  输入：nums1 = [1], m = 1, nums2 = [], n = 0
  输出：[1]
  解释：需要合并 [1] 和 [] 。
  合并结果是 [1] 。

这道题最简单的方法就是直接填充num1数组，然后做一个快速排序即可。但是这种解法没有利用题目中已有的数组是非递减顺序，所以解法二
使用双指针的方法。

解法一：
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums1[m:] = nums2
        nums1.sort()

复杂度分析：
时间复杂度：O((m+n)log(m+n))。
排序序列长度为 m+n，套用快速排序的时间复杂度即可，平均情况为 O((m+n)log(m+n))。

空间复杂度：O(log(m+n))。
排序序列长度为 m+n，套用快速排序的空间复杂度即可，平均情况为 O(log(m+n))。

解法二：
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        p1 = m-1
        p2 = n-1
        tail = m+n-1                 #nums1最尾部
        while p1>=0 or p2>=0:
            if p1==-1:
                nums1[tail] = nums2[p2]
                p2-=1
            elif p2==-1:
                break
            elif nums1[p1]>=nums2[p2]:
                nums1[tail] = nums1[p1]
                p1-=1
            else:
                nums1[tail] = nums2[p2]
                p2-=1
            tail-=1

解法二使用双指针时首先考虑放在头部指针还是尾部指针。因为如果放在头部的话可能导致nums1里的元素在没有被取出之前就被覆盖，同时也要开辟新的空间。
但是nums1的尾部是空的，可以放下nums2的元素。所以双指针就都放在尾部。
p1和p2都在nums1和nums2有数字的末尾。tail放在nums1的最尾部。此时只需要将两个数组的元素分情况放入nums1中即可
